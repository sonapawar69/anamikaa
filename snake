#STRING OPERATIONS
str1 = 'PoojaKiranKumarJain'
print(str1)

# Slicing the string
str1 = "PoojaKiranKumarJain"
print(str1[0:]) #printing whole string
print(str1[2:6]) #printing 2nd to 6th char
print(str1[-1:-5:-1]) #printing last to 4th last char

# Reversing the string
str1 = 'PoojaKiranKumarJain'
print(str1[::-1])

# Deleting a string
str1 = 'PoojaKiranKumarJain'
del str1
print(str1)

# Concantation of the strings
str1 =  'Pooja'
str2 = ' Jain'
print(str1+str2)

#Repetition of string
str1 = 'PoojaKiranKumarJain '
print(str1*3)

# Length of string
str1 = 'PoojaKiranKumarJain'
length = len(str1)
print(length)

# Capitalise first letter
str1 = 'pooja'
c = str1.capitalize()
print(c)

# Convert to uppercase
str1 = "pooja kiran kumar jain"
u = str1.upper()
print(u)

# Remove leading whitespace
str1 = " Pooja"
l = str1.lstrip()
print(l)

# Remove trailing whitespace
str1 = "Pooja "
l = str1.rstrip()
print(l)

#LIST OPERATIONS
# Slicing of list
l = ['Pooja','RollNo 18', 'Mumbai', 'Prabhadevi']
print(l[0:]) #first to last element
print(l[1:3]) #second and third element

# Reversing the list
l = ['Pooja','RollNo 18', 'Mumbai', 'Prabhadevi']
print(l[::-1])

#Deleting a list element
l = ['Pooja','RollNo 18', 'Mumbai', 'Prabhadevi']
del l
print(l)

# adding  an item in the end
l = ['Pooja','RollNo 18', 'Mumbai',]
l.append( 'Prabhadevi')
print(l)

# inserting an element in 2nd position
l = ['Pooja','RollNo 18', 'Mumbai', 'Prabhadevi']
l.insert(1,'EXTC')
print(l)

#iterantion using for loop
l = ['Pooja','RollNo 18', 'Mumbai', 'Prabhadevi']
for i in l:
  print(i)

#replacing list value with another value
l = ['Pooja','RollNo 18', 'Mumbai', 'Prabhadevi']
l[2]= "Chennai"
print(l)

# extend list with another list
l = ['Pooja','RollNo 18', 'Mumbai', 'Prabhadevi']
l1 = ['TSEC Contingent']
l.extend(l1)
print(l)

#del and clear operation difference
l = ['Pooja','RollNo 18', 'Mumbai', 'Prabhadevi']
del l
print(l)

#clear operation
l = ['Pooja','RollNo 18', 'Mumbai', 'Prabhadevi']
l.clear()
print(l)

#sorting
l = ['Pooja','RollNo 18', 'Mumbai', 'Prabhadevi']
l.sort()
print(l)

#pop operation
l = ['Pooja','RollNo 18', 'Mumbai', 'Prabhadevi']
l.pop()
print(l)

#TUPLE OPERATIONS
#slicing using indexing
t=('Pooja','EXTC','Mumbai',20)
print(t[0:])#print all
print(t[-1])#print last

#max value
t=(12,23,43,13)
print(max(t))

#min value
t=(12,23,43,13)
print(min(t))

#iteration of tuple using for loop
t=('Pooja','EXTC','Mumbai',20)
for x in t:
  print(t)

#deleting a tuple
t=('Pooja','EXTC','Mumbai',20)
del t
print(t)

#adding item by converting to list
t=('Pooja','EXTC','Mumbai',20)
w=list(t)
w.append('Jain')
print(tuple((w)))

#length of tuple
t=('Pooja','EXTC','Mumbai',20)
print(len(t))

#SET OPERATIONS
#creating a set
s={'Pooja','Vaishnavi','Vidhi','Hasan','Sneh'}
print(s)

#looping through set elements
s={'Pooja','Vaishnavi','Vidhi','Hasan','Sneh'}
for x in s:
  print(s)

#add operation
s={'Pooja','Vaishnavi','Vidhi','Hasan','Sneh'}
s.add('Aaditya')
print(s)

#update operation
s={'Pooja','Vaishnavi','Vidhi','Hasan','Sneh'}
s.update(['Aaditya','Jash'])
print(s)

#remove operation
s={'Pooja','Vaishnavi','Vidhi','Hasan','Sneh'}
s.remove('Vidhi')
print(s)

#pop operation
s={'Pooja','Vaishnavi','Vidhi','Hasan','Sneh'}
s.pop()
print(s)

#discard operation
s={'Pooja','Vaishnavi','Vidhi','Hasan','Sneh'}
s.discard('Sneh')
print(s)

#remove operation
s={'Pooja','Vaishnavi','Vidhi','Hasan','Sneh'}
s.remove('Pooja')
print(s)

#union operation
s={'Pooja','Vaishnavi','Vidhi','Hasan','Sneh'}
w= {'Aaditya','Jash'}
print(s.union(w))

#intersection operation
s={'Pooja','Vaishnavi','Vidhi','Hasan','Sneh'}
w= {'Aaditya','Jash','Pooja','Vidhi'}
print(s&w)

#DICTIONARY OPERATIONS
#creating and prining dictionary
d = {'Pooja':18, "Vaishnavi":29,'Govind':39}
print(d)

#accessing items of a dictionary
d = {'Pooja':18, "Vaishnavi":29,'Govind':39}
for x in d:
  print(d[x])

#Use of keys and vales in dictionary
d = {'Pooja':18, "Vaishnavi":29,'Govind':39}
print('keys are:\n')
print(d.keys())
print('values are:\n')
print(d.values())

#updating the dictionary
d = {'Pooja':18, "Vaishnavi":29,'Govind':39}
d['Pooja']=17
print(d)

#adding/removing the value
d = {'Pooja':18, "Vaishnavi":29,'Govind':39}
d['Sneh']=65
print('After adding \n')
print(d)
del d['Sneh']
print('After removing \n')
print(d)

#del operation
d = {'Pooja':18, "Vaishnavi":29,'Govind':39}
del d
print(d)

#clear operation
d = {'Pooja':18, "Vaishnavi":29,'Govind':39}
d.clear()
print(d)

#looping thriugh dictionary key/vales/items
d = {'Pooja':18, "Vaishnavi":29,'Govind':39}
for x in d:
  print('key: ',x)
  print('Value: ',d[x])

#IF ELSE AND LOOP EXPT
#1.	area perimeter volume
radius = float(input("Enter the radius of the sphere: "))
sarea = 4 * 3.14 * radius ** 2
scircumference = 2 * 3.14 * radius
svolume = (4 / 3) * 3.14 * radius ** 3
side = float(input("Enter the side of the cube: "))
carea = 6 * side ** 2
cperimeter = 12 * side
cvolume = side ** 3
print("Area of the cube:", carea)
print("Perimenter of the cube:", cperimeter)
print("Volume of the cube:", cvolume)
print("Area of the sphere:", sarea)
print("Circumference of the sphere:", scircumference)
print("Volume of the sphere:", svolume)


#print even numbers
numbers = [int(x) for x in input("Enter numbers separated by spaces: ").split()]
even_numbers = [num for num in numbers if num % 2 == 0]
print("Even numbers:", even_numbers)

#print positive numbers
numbers = [int(x) for x in input("Enter numbers separated by spaces: ").split()]
positive_numbers = [num for num in numbers if num > 0]
print("Positive numbers:", positive_numbers)

#max of 3
a = int(input("Enter first number: "))
b = int(input("Enter second number: "))
c = int(input("Enter third number: "))
maximum = max(a, b, c)
print("Maximum number:", maximum)

#quadratic roots
import cmath
a = float(input("Enter coefficient a: "))
b = float(input("Enter coefficient b: "))
c = float(input("Enter coefficient c: "))
discriminant = b ** 2 - 4 * a * c
root1 = (-b + cmath.sqrt(discriminant)) / (2 * a)
root2 = (-b - cmath.sqrt(discriminant)) / (2 * a)
print("Roots of the quadratic equation:", root1, "and", root2)

#vowel, consonat, digit, special char
character = input("Enter a character: ")
if character.isalpha():
    if character.lower() in 'aeiou':
        print("Vowel")
    else:
        print("Consonant")
elif character.isdigit():
    print("Digit")
else:
    print("Special Character")


#factorial
def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n - 1)
number = int(input("Enter a number: "))
print("Factorial of", number, "is", factorial(number))

#reverse of 5 digit no
number = int(input("Enter a 5-digit number: "))
reversed_number = 0
while number != 0:
    digit = number % 10
    reversed_number = reversed_number * 10 + digit
    number //= 10
print("Reverse of the number:", reversed_number)


#count no of alphabets
string = input("Enter a string: ")
alphabet_count = sum(c.isalpha() for c in string)
digit_count = sum(c.isdigit() for c in string)
print("Number of alphabets:", alphabet_count)
print("Number of digits:", digit_count)

#youngest of 3 ages
age1 = int(input("Enter first age: "))
age2 = int(input("Enter second age: "))
age3 = int(input("Enter third age: "))
if age1<age2 and age1<age3:
  print('First person is youngest')
if age2<age3 and age2<age1:
  print('Second person is youngest')
if age3<age2 and age3<age1:
  print('Third person is youngest')

#pattern a
for i in range(1,7):
  for j in range(1,i+1):
    print('*',end=" ")
  print('\n')

#pattern b
for i in range(1,7):
  for j in range(1,i+1):
    print('*',end=" ")
  print('\n')
for i in range(4,-1,-1):
  for j in range(i,-1,-1):
    print('*',end=" ")
  print('\n')

#pattern c
for i in range(1,6):
  print(" " * (6 - i), end="")
  for j in range(1, 2 * i):
    print(j, end="")
  print()


#FUNCTIONS
#receive integers and get sum product and subtraction
def add(a,b):
  return a+b
def sub(a,b):
  return a-b
def pro(a,b):
  return a*b
a = int(input('Enter first number: '))
b = int(input('Enter second number: '))
print('Sum:',add(a,b))
print('Difference:',sub(a,b))
print('Product:',pro(a,b))

#to compute frequency of words
def word(s):
  words=s.split()
  f={}
  for i in words:
    if i in f:
      f[i] +=1
    else:
        f[i] = 1
  return f
s = 'Soft kitty warm kitty happy kitty sleepy kitty purr purr purr'
print(word(s))

#gross salary computation
def salary (BD, DA, HRA):
  return BS+DA+HRA
BS = int(input('Enter base salary: '))
DA = 0.8 * BS
HRA = 0.2 * BS
print('Gross Salary: ',salary(BS,DA,HRA))

#TOTAL and average
def totavg():
  number = input("enter numbers:").split()
  number = [int(i) for i in number]
  total = sum(number)
  average = total/len(number)
  return total,average
totavg()

#CLASS AND INHERITANCE
#DISPLAY CLASS DETAILS
class Student:
    def __init__(self, name, age, student_id):
        self.name = name
        self.age = age
        self.student_id = student_id

students = [
    Student("Pooja", 20, 101),
    Student("Vaish", 22, 102),
    Student("Aadi", 21, 103),
]

sorted_students = sorted(students, key=lambda x: x.name)

for student in sorted_students:
    print(f"Name: {student.name}, Age: {student.age}, ID: {student.student_id}")

#MULTIPLE INHERITANCE using constructor
class Car:
    def __init__(self, brand):
        self.brand = brand
        print("Car constructor called")

    def display(self):
        print("Brand of Car:", self.brand)

class Bike:
    def __init__(self, model):
        self.model = model
        print("Bike constructor called")

    def display(self):
        print("Model of Bike:", self.model)

class Child(Car, Bike):
    def __init__(self, car_brand, bike_model, vehicle_color):
        Car.__init__(self, car_brand)
        Bike.__init__(self, bike_model)
        self.color = vehicle_color
        print("Child constructor called")

    def display(self):
        Car.display(self)
        Bike.display(self)
        print("Color of Vehicle:", self.color)

vehicle_obj = Child("Toyota", "Ninja", "Red")
vehicle_obj.display()


#IMAGE PROCESSING EXPT
import cv2
from google.colab.patches import cv2_imshow
im = cv2.imread('/content/veggie.jpeg')
cv2_imshow(im)

import cv2
gray_image = cv2.cvtColor(im, cv2.COLOR_BGR2GRAY)
cv2_imshow(gray_image)

cv2.imwrite('veggiegray.jpg',gray_image)


import cv2
import matplotlib.pyplot as plt
img_1=cv2.imread('veggiegray.jpg')
img_2 = 255 - img_1
plt.imshow(img_1)
plt.title("Original Image")
plt.show()
plt.imshow(img_2)
plt.title("Negative Image")
plt.show()

im = cv2.imread('veggiegray.jpg')
cv2_imshow(im)
y=cv2.blur(im, (13,13))
cv2_imshow(y)


cv2_imshow(im)
Median_Blur = cv2.medianBlur(im,15)
cv2_imshow(Median_Blur)

import cv2
import numpy as np
from matplotlib import pyplot as plt
x=cv2.imread('/content/horse.jpeg')
Median_Blur = cv2.medianBlur(x,7)
plt.subplot(121),plt.imshow(x)
plt.title("Noisy Image")
plt.subplot(122),plt.imshow(Median_Blur,cmap="gray")
plt.title('Median filtered image')

import cv2
img = cv2.imread('/content/veggiegray.jpg')
cv2_imshow(img)
edges = cv2.Canny(img,50,100)
cv2_imshow(edges)


from matplotlib import pyplot as plt
plt.figure(figsize=(16,16))
plt.subplot(121)
plt.imshow(img)
plt.title('Original Image')
plt.subplot(122)
plt.imshow(edges)
plt.title("Edge Image")
plt.show()


  import cv2
from matplotlib import pyplot as plt
from google.colab.patches import cv2
img = cv2.imread('/content/man')
cv2_imshow(img)
plt.hist(img.ravel(),bins = 256, range = [0,256])
plt.show

import cv2
import numpy as np
img = cv2.imread('/content/IMG_0586.jpeg')
kernel = np.ones((5,5),np.uint8)
erosion = cv2.erode(img, kernel, iterations=2)
cv2_imshow(img)
cv2_imshow(erosion)

img = cv2.imread('/content/man')
cv2_imshow(img)
img2 = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
img2 = cv2.equalizeHist(img2)
cv2_imshow(img2)

#MACHINE LEARNING EXPT
#LINEAR REGRESSION
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn import linear_model
import matplotlib.pyplot as plt

features = [[2],[1],[5],[10]]
#print(features)
labels = [25, 11, 70, 158]
plt.scatter(features, labels)

clf = linear_model.LinearRegression()
clf=clf.fit(features,labels)

predicted = clf.predict([[9]])
print(predicted)

predicted = clf.predict(features)
print(predicted)

#To retrieve the intercept:
print(clf.intercept_)
#For retrieving the slope:
print(clf.coef_)

from sklearn import metrics
ypredicted=clf.predict(features)
rmse = metrics.mean_squared_error(labels, predicted)
print(rmse)

#SCATTER PLOT
#Example1
features = [[6],[2],[10],[4],[8]]
#print(features)
labels = [9, 11, 5, 8,7]

import matplotlib.pyplot as plt
plt.title('Scatter Plot')
plt.scatter(features, labels)
plt.xlabel('Independent variable')
plt.ylabel('Dependent variable')
plt.show()

clf = linear_model.LinearRegression()
clf=clf.fit(features,labels)

predicted = clf.predict(features)
print(predicted)

#To retrieve the intercept:
print(clf.intercept_)
#For retrieving the slope:
print(clf.coef_)

from sklearn import metrics
ypredicted=clf.predict(features)
rmse = metrics.mean_squared_error(labels, ypredicted)
print(rmse)

#MULTIPLE REGRESSON
import numpy as np
from sklearn.linear_model import LinearRegression
x = [[3, 8], [4,5], [5,7], [6,3], [2,1]]
y = [-3.7,3.5,2.5,11.5,5.7]
x, y = np.array(x), np.array(y)
model = LinearRegression().fit(x, y)
print('intercept:', model.intercept_)
print('slope:', model.coef_)

y_pred = model.predict(x)
print('predicted response:', y_pred, sep='\n')

x_new=[[3,5]]
y_new = model.predict(x_new)
print(y_new)

import pandas
df = pandas.DataFrame({'Actual': y,'Predicted': y_pred})
df1 = df.head(5)
print(df1)

from sklearn import metrics
ypredicted=model.predict(x)
mse1 = metrics.mean_squared_error(y, y_pred)
print(mse1)

#LOGISTIC REGRESSION
import matplotlib.pyplot as plt
import numpy as np
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import classification_report, confusion_matrix

x = np.arange(10).reshape(-1, 1)
y = np.array([0, 0, 0, 0, 1, 1, 1, 1, 1, 1])

print(x)
print(y)

model = LogisticRegression(solver='liblinear', random_state=0).fit(x, y)

model.intercept_

model.coef_

model.predict_proba(x)

model.predict(x)

model.score(x, y)

confusion_matrix(y, model.predict(x))

#SciPy CODES

#Importing the fft and inverse fft functions from fftpackage
from scipy.fftpack import fft,ifft
import numpy as np
#create an array with random n numbers
x = np.array([1.0, 3.0, -2.0, 1.0])
#Applying the fft function
y = fft(x)
print (y)
#FFT is already in the workspace, using the same workspace to for inverse transform
yinv = ifft(y)
print(yinv)

# Write python program to use SciPy to solve a linear algebra problem.
## There is a test with 30 questions worth 150 marks. The test has two types of questions: 1. True or false – carries 4 marks each       2. Multiple-choice – carries 9 marks each. Find the number of true or false and multiple-choice questions.

#importing the scipy and numpy packages
from scipy import linalg
import numpy as np
#Declaring the numpy arrays
a = np.array([[1, 1], [4, 9]])
b = np.array([30, 150])
#Passing the values to the solve function
x = linalg.solve(a, b)
#printing the result array
print (x)

#importing the scipy and numpy packages
from scipy import linalg
import numpy as np
#Declaring the numpy array
A = np.array([[1,2],[3,4]])
#Passing the values to the eig function
l, v = linalg.eig(A)
#printing the result for eigen values
print(l)
#printing the result for eigen vectors
print(v)
